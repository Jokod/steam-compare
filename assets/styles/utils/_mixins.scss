/******************************************************************
   Generic utilities, block styling and positioning
******************************************************************/

@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after { clear: both; }
}

@mixin centerBox {
  margin: {
    left: auto;
    right: auto;
  }
}

@mixin resetBoxHeight {
  font-size: 0;
  line-height: normal;
}

@mixin childrenInlineBlock {
  > * {
    display: inline-block;
    vertical-align: middle;
  }
}

/*! Input appearance clear */
@mixin clearAppearance {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

/*! Placeholder modifier */
@mixin inputPlaceholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

@mixin ellipsisTruncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin pseudo($pos: absolute, $type: inline-block) {
  content: '';
  position: $pos;
  display: $type;
}


/******************************************************************
    Transformation and transitions
******************************************************************/

/*! Transition wrapper */
@mixin transition($transition...) {
  -webkit-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

/*! Rotation wrapper */
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
  -ms-transform: rotate($degrees);
  transform: rotate($degrees);
}

/*! Translation wrapper */
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
  -ms-transform: translate($x, $y);
  transform: translate($x, $y);
}

/*! Scale wrapper */
@mixin scale($percentage) {
  -webkit-transform: scale($percentage);
  -ms-transform: scale($percentage);
  transform: scale($percentage);
}


/******************************************************************
    Media queries and responsive helpers
******************************************************************/

/*! Classic media query */
@mixin mediaQuery($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }

    @media screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

/*! Ranged media query */
@mixin mediaQueryRange($minWidth, $maxWidth) {
  @if (map_has_key($breakpoints, $minWidth) and map_has_key($breakpoints, $maxWidth)) {
    $min: map_get($breakpoints, $minWidth);
    $max: map_get($breakpoints, $maxWidth);

    @media screen
    and (min-width: $min)
    and (max-width: $max - 1px) {
      @content;
    }
  }
}

/*! Set the responsive ratio (eg. image wrappers) */
@mixin responsiveRatio($x, $y) {
  $padding: unquote( ( $y / $x ) * 100 + '%' );
  padding-top: $padding;
}